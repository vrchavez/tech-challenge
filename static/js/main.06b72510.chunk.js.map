{"version":3,"sources":["logo.svg","containers/Loading.js","components/BreedSelect.js","containers/Breeds.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","props","state","text","stopper","this","interval","window","setInterval","setState","currentState","clearInterval","React","Component","BreedSelect","console","log","activeList","className","Object","keys","list","map","breed","key","toUpperCase","name","type","onChange","e","onToggleBreed","target","checked","value","find","localStorage","getItem","split","img","style","height","width","src","replace","Breeds","loading","breeds","activeBreeds","handleToggleBreed","bind","breedMaster","breedChild","isVisible","concat","breedContainer","breedList","length","push","encodedURI","encodeURI","fetch","then","res","json","result","message","cleanImages2","JSON","stringify","images","container","i","includes","setItem","breedListX","breedX","cleanImages2X","imagesX","containerX","iX","error","filter","currentBreeds","dog","index","indexOf","splice","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.06b72510.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n// Component made to for loading animation. Allows for info to get to component\r\n// without looking too messy.\r\nclass Loading extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            text: 'Loading'\r\n        }\r\n    }\r\n\r\n    // When component mounts, we add ... to text and remove ... at stopper and start again.\r\n    componentDidMount() {\r\n        const stopper = this.state.text + '...'\r\n\r\n        this.interval = window.setInterval(() => {\r\n            this.state.text === stopper \r\n            ? this.setState({text: 'Loading'})\r\n            : this.setState((currentState)=> {\r\n                return {\r\n                    text: currentState.text + '.'\r\n                }\r\n            })\r\n        }, 300);\r\n    }\r\n\r\n    // Clears interval, so process gets killed.\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.interval)\r\n    }\r\n\r\n    render() {\r\n        return <p>{this.state.text}</p>\r\n    }\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport '../stylings/breed.css'\r\n\r\n\r\nfunction BreedSelect(props) {\r\n    console.log(props.activeList)\r\n    return (\r\n        <div>\r\n        <h1>Breeds</h1>\r\n        <p>Please select breed to display image</p>\r\n        <ul className={\"breed-grid\"}>\r\n            {Object.keys(props.list).map((breed) => (\r\n                <li key={breed}>\r\n                    <span> {breed.toUpperCase()} </span>\r\n                    <input\r\n                        name=\"breedToggle\"\r\n                        type=\"checkbox\"\r\n                        onChange={(e) => props.onToggleBreed(breed, '', e.target.checked)} />\r\n                    <ul>\r\n                        {props.list[breed].map((value) => (\r\n                            \r\n                            <li>\r\n                                <span>\r\n                                    {value.toUpperCase()}\r\n                                    <input\r\n                                    name=\"breedToggle\"\r\n                                    type=\"checkbox\"\r\n                                    onChange={(e) => props.onToggleBreed(breed, value, e.target.checked)} />\r\n                                </span>\r\n                                <ul>\r\n                                    {(props.activeList.find((name)=> name === breed+value) && localStorage.getItem(breed+value)) && (\r\n                                    localStorage.getItem(breed+value).split(',').map((img) => (\r\n                                        <li><img style={{height: 90, width: 90}} \r\n                                        src={img.replace('\"', '').replace('[', '').replace(']', '')\r\n                                        .replace(/\\\\/g, '').replace('\"', '')} /></li>\r\n                                    )))}\r\n                                </ul>\r\n                            </li>\r\n                        ))}\r\n                        {props.activeList.find((name)=> name === breed) && (\r\n                            localStorage.getItem(breed).split(',').map((img) => (\r\n                                <li><img style={{height: 90, width: 90}} \r\n                                src={img.replace('\"', '').replace('[', '').replace(']', '')\r\n                                .replace('\"', '').replace(/\\\\/g, '').replace('\"', '')} /></li>\r\n                            )))}\r\n                    </ul>\r\n                </li>     \r\n            ))}\r\n        </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BreedSelect;","import React, {useState} from 'react';\r\nimport Loading from './Loading';\r\nimport BreedSelect from '../components/BreedSelect';\r\n\r\n\r\nclass Breeds extends React.Component { \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            loading: true,\r\n            breeds: [],\r\n            activeBreeds: [],\r\n        }\r\n        this.handleToggleBreed = this.handleToggleBreed.bind(this);\r\n    }\r\n\r\n\r\n    // Handles toggle of checkbox. If clicked, gets breed if not in local storage.\r\n    handleToggleBreed(breedMaster, breedChild, isVisible) {\r\n        // If checkbox is clicked, remove from active list \r\n        if (!isVisible) {\r\n            if (breedChild !== '') {\r\n                this.setState((currentState) => {\r\n                    const currentBreeds = currentState.activeBreeds;\r\n                    return {\r\n                        activeBreeds: currentBreeds.filter((breed) => breed !== breedMaster+breedChild),\r\n                    }\r\n                })\r\n            } else {\r\n                const breedList = this.state.breeds[breedMaster];\r\n                if (breedList.length > 0) {\r\n                    var currentBreeds = this.state.activeBreeds;\r\n                        for (var dog in breedList) {\r\n                            var index = currentBreeds.indexOf(breedList[dog]);\r\n                            currentBreeds.splice(index,1)\r\n                            if(+dog === breedList.length-1) {\r\n                                this.setState((currentState) => {\r\n                                    return {\r\n                                        activeBreeds: currentBreeds\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                } else {\r\n                    this.setState((currentState) => {\r\n                        const currentBreeds = currentState.activeBreeds;\r\n                        return {\r\n                            activeBreeds: currentBreeds.filter((breed) => breed !== breedMaster),\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        } else {\r\n            // If checkbox is not true, we check to see if we already made api call.\r\n            if(localStorage.getItem(breedMaster)) {\r\n                if (breedChild !== '') {\r\n                    this.setState((currentState) => {\r\n                        return {\r\n                            activeBreeds: currentState.activeBreeds.concat(breedMaster+breedChild),\r\n                        }\r\n                    })\r\n                } else {\r\n                    \r\n                    // Check if there is list.\r\n                    var breedContainer = [];\r\n                    var breedList = this.state.breeds[breedMaster];\r\n                    if (breedList.length > 0) {\r\n                        for (var breed in breedList) {\r\n                            breedContainer.push(breedMaster+breedList[breed])\r\n                            if (breedList.length-1 === +breed) {\r\n                                this.setState((currentState) => {\r\n                                    return {\r\n                                        activeBreeds: currentState.activeBreeds.concat(breedContainer),\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this.setState((currentState) => {\r\n                            return {\r\n                                activeBreeds: currentState.activeBreeds.concat(breedMaster),\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n            // If it's not in local storage, we make a call for images of breedMaster.\r\n            // In this else, we also store images for breedChild, if there are any.\r\n            }else {\r\n                const encodedURI = encodeURI(`https://dog.ceo/api/breed/${breedMaster}/images`)\r\n                fetch(encodedURI)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        // Sorry, here I see if there are child breeds, if there is, I divide all of the images into set breed.\r\n                        // If there isn't, I set the masterBreed as main handler of all images.\r\n                        var breedList = this.state.breeds[breedMaster];\r\n                        // Check if there is list.\r\n                        if (breedList.length > 0 && result.message.length > 0 && breedChild !== '') {\r\n                            console.log(breedList.length + 'her');\r\n                            // Iterate through list when found and filter the image strings, then make array with clean images.\r\n                            for(var breed in breedList) {\r\n                                var receiveMessage = JSON.stringify(result.message);\r\n                                var cleanImages1 = receiveMessage.replace('\"', '').replace('[', '').replace(']', '').replace('\"', '');\r\n                                var cleanImages2 = cleanImages1.replace('[', '').replace(/\\\\/g, '').replace('\"', ''); \r\n                                var images = JSON.stringify(cleanImages2).split(',');          \r\n                                var container = [];\r\n                                // In this iteration, I check if breed is in image url, then set in local if it is.\r\n                                for (var i = 0; i < images.length; i++) {\r\n                                    if(images[i].includes(breedList[breed])) {\r\n                                        container.push(images[i]);\r\n                                    }\r\n                                    if (i === images.length -1) {\r\n                                        localStorage.setItem(breedMaster + breedList[breed], container);\r\n                                        this.setState((currentState) => {\r\n                                            return {\r\n                                                activeBreeds: currentState.activeBreeds.concat(breedMaster+breedChild),\r\n                                            }    \r\n                                        });\r\n                                        localStorage.setItem(breedMaster, true);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            var breedContainer = []\r\n                            var breedListX = this.state.breeds[breedMaster];\r\n                            if (breedListX.length > 0) {\r\n                                console.log('her');\r\n                                for(var breedX in breedListX) {\r\n                                    var receiveMessageX = JSON.stringify(result.message);\r\n                                    var cleanImages1X = receiveMessageX.replace('\"', '').replace('[', '').replace(']', '').replace('\"', '');\r\n                                    var cleanImages2X = cleanImages1X.replace('[', '').replace(/\\\\/g, '').replace('\"', ''); \r\n                                    var imagesX = JSON.stringify(cleanImages2X).split(',');          \r\n                                    var containerX = [];\r\n                                    // In this iteration, I check if breed is in image url, then set in local if it is.\r\n                                    for (var iX = 0; iX < imagesX.length; iX++) {\r\n                                        if(imagesX[iX].includes(breedListX[breedX])) {\r\n                                            containerX.push(imagesX[iX]);\r\n                                        }\r\n                                        if (iX === imagesX.length -1) {\r\n                                            localStorage.setItem(breedMaster + breedListX[breedX], containerX);\r\n                                        }\r\n                                    }\r\n                                    //console.log('her ' + breedMaster+breedList[breed])\r\n                                    breedContainer.push(breedMaster+breedListX[breedX])\r\n                                    console.log(breedContainer);\r\n                                    if(+breedX === breedListX.length-1) {\r\n                                        this.setState((currentState) => {\r\n                                            return {\r\n                                                activeBreeds: currentState.activeBreeds.concat(breedContainer),\r\n                                            }    \r\n                                        });\r\n                                        localStorage.setItem(breedMaster, true);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                localStorage.setItem(breedMaster, JSON.stringify(result.message));\r\n                                this.setState((currentState) => {\r\n                                    return {\r\n                                        activeBreeds: currentState.activeBreeds.concat(breedMaster),\r\n                                    }\r\n                                    \r\n                                })\r\n                            }\r\n\r\n                        } \r\n                    },\r\n                    (error) => {\r\n                    this.setState({\r\n                        loading: true,\r\n                        error\r\n                    });\r\n                    }\r\n                )\r\n                }   \r\n\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\"---DidUpdate\" + this.state.breeds);\r\n    }\r\n\r\n    // Make api call once component is mounted, we get the list of all the breeds. If had more time would have cached this too.\r\n    componentDidMount() {\r\n        fetch(\"https://dog.ceo/api/breeds/list/all\")\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                this.setState({\r\n                    breeds: result.message,\r\n                    loading: false,\r\n                });        \r\n            },\r\n            (error) => {\r\n            this.setState({\r\n                loading: true,\r\n                error\r\n            });\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return <Loading/>\r\n        } else {\r\n            return <BreedSelect activeList={this.state.activeBreeds} onToggleBreed={this.handleToggleBreed} list={this.state.breeds} />\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default Breeds;","import React from 'react';\nimport logo from '../logo.svg';\nimport Breeds from '../containers/Breeds';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Breeds />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}